import React, { useState } from 'react';
import { useTournament } from '../contexts/TournamentContext';
import FridayTeamIManagement from './FridayTeamIManagement';
import ManualMatchManagement from './ManualMatchManagement';

/**
 * Composant de gestion des matchs
 * Permet de sauvegarder, restaurer et r√©g√©n√©rer les matchs
 */
function MatchManagement() {
  const { refreshData } = useTournament();
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');
  const [messageType, setMessageType] = useState('');
  const [matchesPerTeam, setMatchesPerTeam] = useState(3);
  const [activeSection, setActiveSection] = useState('general');

  /**
   * Affiche un message de feedback
   * @param {string} text - Texte du message
   * @param {string} type - Type du message (success, error, info)
   */
  const showMessage = (text, type) => {
    setMessage(text);
    setMessageType(type);
    setTimeout(() => {
      setMessage('');
      setMessageType('');
    }, 5000);
  };

  /**
   * G√©n√®re les matchs du vendredi pour l'√©quipe I
   */
  const handleGenerateFridayMatches = async () => {
    if (!confirm('Voulez-vous g√©n√©rer les matchs du vendredi pour l\'√©quipe I ? Cela remplacera les matchs du vendredi existants pour l\'√©quipe I.')) {
      return;
    }

    setLoading(true);
    try {
      const response = await fetch('/api/matches/generate-friday-team-i', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      const data = await response.json();

      if (response.ok) {
        showMessage(
          `‚úÖ ${data.message}\n\n` +
          `üèÜ √âquipe I: ${data.teamI}\n` +
          `ü•â Adversaires: ${data.opponents.join(', ')}\n` +
          `‚öΩ ${data.matches.length} matchs g√©n√©r√©s`,
          'success'
        );
        
        // Actualiser les donn√©es
        await refreshData();
      } else {
        showMessage(`‚ùå Erreur: ${data.error}`, 'error');
      }
    } catch (error) {
      console.error('Erreur g√©n√©ration matchs vendredi:', error);
      showMessage('‚ùå Erreur lors de la g√©n√©ration des matchs du vendredi', 'error');
    } finally {
      setLoading(false);
    }
  };


  /**
   * Restaure le planning standard pr√©d√©fini
   */
  const handleRestoreMatches = async () => {
    if (!confirm('Voulez-vous restaurer le planning standard ? Cela remplacera les matchs actuels.')) {
      return;
    }

    setLoading(true);
    try {
      // Planning standard bas√© sur l'image fournie
      const standardMatches = [
        // Lundi
        { id: 'lundi-1', jour: 'lundi', heure: '12:00', equipe1_id: 'A', equipe2_id: 'B' },
        { id: 'lundi-2', jour: 'lundi', heure: '13:00', equipe1_id: 'C', equipe2_id: 'D' },
        { id: 'lundi-3', jour: 'lundi', heure: '13:30', equipe1_id: 'E', equipe2_id: 'F' },
        
        // Mardi
        { id: 'mardi-1', jour: 'mardi', heure: '12:00', equipe1_id: 'A', equipe2_id: 'C' },
        { id: 'mardi-2', jour: 'mardi', heure: '13:00', equipe1_id: 'B', equipe2_id: 'D' },
        { id: 'mardi-3', jour: 'mardi', heure: '13:30', equipe1_id: 'G', equipe2_id: 'H' },
        
        // Mercredi
        { id: 'mercredi-1', jour: 'mercredi', heure: '12:00', equipe1_id: 'A', equipe2_id: 'E' },
        { id: 'mercredi-2', jour: 'mercredi', heure: '13:00', equipe1_id: 'B', equipe2_id: 'F' },
        { id: 'mercredi-3', jour: 'mercredi', heure: '13:30', equipe1_id: 'C', equipe2_id: 'G' },
        
        // Jeudi
        { id: 'jeudi-1', jour: 'jeudi', heure: '12:00', equipe1_id: 'D', equipe2_id: 'H' },
        { id: 'jeudi-2', jour: 'jeudi', heure: '13:00', equipe1_id: 'E', equipe2_id: 'G' },
        { id: 'jeudi-3', jour: 'jeudi', heure: '13:30', equipe1_id: 'F', equipe2_id: 'H' }
      ];

      const response = await fetch('/api/matches/restore-standard', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          matches: standardMatches
        })
      });

      const data = await response.json();

      if (response.ok) {
        showMessage(`‚úÖ Planning standard restaur√© avec succ√®s (${data.count} matchs)`, 'success');
        await refreshData(); // Rafra√Æchir les donn√©es
      } else {
        showMessage(`‚ùå Erreur: ${data.error}`, 'error');
      }
    } catch (error) {
      console.error('Erreur restauration:', error);
      showMessage('‚ùå Erreur de connexion lors de la restauration', 'error');
    } finally {
      setLoading(false);
    }
  };

  /**
   * R√©g√©n√®re les matchs automatiquement
   */
  const handleRegenerateMatches = async () => {
    if (!confirm(`Voulez-vous r√©g√©n√©rer les matchs automatiquement ? Cela cr√©era de nouveaux matchs bas√©s sur les √©quipes actuelles avec ${matchesPerTeam} matchs par √©quipe et remplacera les matchs existants.`)) {
      return;
    }

    setLoading(true);
    try {
      const response = await fetch('/api/matches/regenerate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          matchesPerTeam: matchesPerTeam
        })
      });

      const data = await response.json();

      if (response.ok) {
        showMessage(`‚úÖ ${data.message} (${data.count} nouveaux matchs g√©n√©r√©s)`, 'success');
        await refreshData(); // Rafra√Æchir les donn√©es
      } else {
        showMessage(`‚ùå Erreur: ${data.error}`, 'error');
      }
    } catch (error) {
      console.error('Erreur r√©g√©n√©ration:', error);
      showMessage('‚ùå Erreur de connexion lors de la r√©g√©n√©ration', 'error');
    } finally {
      setLoading(false);
    }
  };


  return (
    <div className="match-management">
      <div className="match-management-header">
        <h2>Gestion des Matchs</h2>
        <p>G√©rez les matchs du tournoi : sauvegardez, restaurez ou r√©g√©n√©rez automatiquement les matchs.</p>
        
        {/* Onglets de navigation */}
        <div className="management-tabs">
          <button 
            className={`management-tab ${activeSection === 'general' ? 'active' : ''}`}
            onClick={() => setActiveSection('general')}
          >
            G√©n√©ral
          </button>
          <button 
            className={`management-tab ${activeSection === 'manual' ? 'active' : ''}`}
            onClick={() => setActiveSection('manual')}
          >
            ‚öΩ Gestion Manuelle
          </button>
          <button 
            className={`management-tab ${activeSection === 'friday-team-i' ? 'active' : ''}`}
            onClick={() => setActiveSection('friday-team-i')}
          >
            üèÜ Vendredi - √âquipe I
          </button>
        </div>
      </div>

      {/* Message de feedback */}
      {message && (
        <div className={`alert alert-${messageType}`}>
          {message}
        </div>
      )}

      {/* Contenu des sections */}
      {activeSection === 'general' && (
        <div className="general-section">
          {/* Actions de gestion des matchs */}
          <div className="match-actions">
        <div className="action-group">
          <h3>Restauration du Planning Standard</h3>
          <div className="action-buttons">
            <button 
              className="btn btn--secondary"
              onClick={handleRestoreMatches}
              disabled={loading}
            >
              {loading ? 'Restauration...' : 'üîÑ Restaurer le Planning Standard'}
            </button>
          </div>
          <p className="action-description">
            Restaure le planning standard avec 12 matchs r√©partis sur 4 jours (Lundi-Jeudi).
          </p>
        </div>

                <div className="action-group">
                  <h3>R√©g√©n√©ration Automatique</h3>
                  
                  {/* S√©lecteur du nombre de matchs par √©quipe */}
                  <div className="matches-per-team-selector">
                    <label htmlFor="matchesPerTeam">
                      <strong>Nombre de matchs par √©quipe :</strong>
                    </label>
                    <select
                      id="matchesPerTeam"
                      value={matchesPerTeam}
                      onChange={(e) => setMatchesPerTeam(parseInt(e.target.value))}
                      className="matches-select"
                      disabled={loading}
                    >
                      <option value={1}>1 match par √©quipe</option>
                      <option value={2}>2 matchs par √©quipe</option>
                      <option value={3}>3 matchs par √©quipe</option>
                      <option value={4}>4 matchs par √©quipe</option>
                      <option value={5}>5 matchs par √©quipe</option>
                      <option value={6}>6 matchs par √©quipe</option>
                    </select>
                  </div>

                  <div className="action-buttons">
                    <button
                      className="btn btn--warning"
                      onClick={handleRegenerateMatches}
                      disabled={loading}
                    >
                      {loading ? 'G√©n√©ration...' : '‚ö° R√©g√©n√©rer les Matchs'}
                    </button>
                  </div>
                  <p className="action-description">
                    G√©n√®re automatiquement de nouveaux matchs bas√©s sur les √©quipes actuelles.
                    Chaque √©quipe jouera exactement {matchesPerTeam} match{matchesPerTeam > 1 ? 's' : ''}, r√©partis sur les jours disponibles.
                  </p>
                </div>

        {/* Gestion de l'√©quipe I - Matchs du vendredi */}
        <div className="action-group">
          <h3>üèÜ Gestion de l'√âquipe I - Matchs du Vendredi</h3>
          <div className="action-buttons">
            <button
              className="btn btn--primary"
              onClick={handleGenerateFridayMatches}
              disabled={loading}
            >
              {loading ? 'G√©n√©ration...' : '‚öΩ G√©n√©rer les Matchs du Vendredi pour l\'√âquipe I'}
            </button>
          </div>
          <p className="action-description">
            G√©n√®re automatiquement 3 matchs le vendredi pour l'√©quipe I contre les 3 √©quipes perdantes les mieux not√©es.
            Les matchs seront programm√©s √† 12:00, 13:00 et 13:30.
          </p>
        </div>
          </div>

          {/* Informations sur la r√©g√©n√©ration */}
      <div className="regeneration-info">
        <h4>Comment fonctionne la r√©g√©n√©ration ?</h4>
        <ul>
          <li>üìä <strong>Analyse des √©quipes</strong> : Le syst√®me r√©cup√®re toutes les √©quipes disponibles</li>
          <li>üéØ <strong>Nombre de matchs configurable</strong> : Chaque √©quipe joue le nombre de matchs s√©lectionn√© contre des adversaires diff√©rents</li>
          <li>üîÑ <strong>G√©n√©ration intelligente</strong> : √âvite les doublons, assure l'√©quit√© entre toutes les √©quipes et emp√™che qu'une √©quipe joue plusieurs fois le m√™me jour</li>
          <li>üìÖ <strong>R√©partition temporelle</strong> : R√©partit automatiquement les matchs selon le nombre d'√©quipes. Avec 8 √©quipes : 3 matchs/jour sur 4 jours. Avec 9 √©quipes : 3 matchs/jour du lundi au jeudi + 2 matchs le vendredi (14 matchs total).</li>
          <li>‚è∞ <strong>Cr√©neaux horaires</strong> : Utilise les cr√©neaux 12:00, 13:00, 13:30, 14:00 et 14:30 selon les besoins</li>
          <li>üíæ <strong>Sauvegarde automatique</strong> : Les matchs actuels sont automatiquement sauvegard√©s avant remplacement</li>
        </ul>
      </div>
        </div>
      )}

      {activeSection === 'manual' && (
        <ManualMatchManagement />
      )}

      {activeSection === 'friday-team-i' && (
        <FridayTeamIManagement />
      )}
    </div>
  );
}

export default MatchManagement;
