#!/bin/bash

# Script de d√©ploiement Docker pour VPS
# MyOrigines Tournoi de Babyfoot

set -e  # Arr√™ter en cas d'erreur

echo "üê≥ D√©ploiement Docker de MyOrigines Tournoi de Babyfoot"
echo "====================================================="

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables
REPO_URL="https://github.com/wilf974/MyOrigines-Tournoi-de-Babyfoot.git"
APP_DIR="MyOrigines-Tournoi-de-Babyfoot"
COMPOSE_FILE="docker-compose.yml"

# Fonction pour afficher les messages color√©s
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier Docker
check_docker() {
    print_status "V√©rification de Docker..."
    
    if ! command -v docker &> /dev/null; then
        print_error "Docker n'est pas install√©"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose n'est pas install√©"
        exit 1
    fi
    
    print_success "Docker et Docker Compose sont install√©s"
}

# Cloner ou mettre √† jour le repository
setup_repository() {
    print_status "Configuration du repository..."
    
    if [ -d "$APP_DIR" ]; then
        print_status "Repository existant d√©tect√©. Mise √† jour..."
        cd "$APP_DIR"
        git pull origin main
    else
        print_status "Clonage du repository..."
        git clone "$REPO_URL" "$APP_DIR"
        cd "$APP_DIR"
    fi
    
    print_success "Repository configur√©"
}

# Arr√™ter les conteneurs existants
stop_containers() {
    print_status "Arr√™t des conteneurs existants..."
    
    if [ -f "$COMPOSE_FILE" ]; then
        docker-compose down 2>/dev/null || true
        print_success "Conteneurs arr√™t√©s"
    else
        print_warning "Fichier docker-compose.yml non trouv√©"
    fi
}

# Construire et d√©marrer les conteneurs
start_containers() {
    print_status "Construction et d√©marrage des conteneurs..."
    
    # Construire les images
    docker-compose build --no-cache
    
    # D√©marrer les services
    docker-compose up -d
    
    print_success "Conteneurs d√©marr√©s"
}

# V√©rifier le statut des conteneurs
check_status() {
    print_status "V√©rification du statut des conteneurs..."
    
    sleep 10  # Attendre que les conteneurs d√©marrent
    
    echo ""
    echo "üìä Statut des conteneurs :"
    docker-compose ps
    
    echo ""
    echo "üìã Logs r√©cents :"
    docker-compose logs --tail=10
}

# Configurer le firewall
setup_firewall() {
    print_status "Configuration du firewall..."
    
    # V√©rifier si ufw est install√©
    if command -v ufw &> /dev/null; then
        ufw allow 2000 2>/dev/null || true
        ufw allow 2001 2>/dev/null || true
        ufw allow 2002 2>/dev/null || true
        print_success "Ports ouverts dans le firewall"
    else
        print_warning "UFW non install√©, configurez manuellement les ports 2000-2002"
    fi
}

# Afficher les informations de d√©ploiement
show_deployment_info() {
    echo ""
    echo "üéâ D√©ploiement Docker termin√© avec succ√®s !"
    echo "=========================================="
    echo ""
    echo "üê≥ Conteneurs Docker :"
    echo "  ‚Ä¢ Frontend React:  Port 2000"
    echo "  ‚Ä¢ Backend API:     Port 2001"
    echo "  ‚Ä¢ Nginx Proxy:     Port 2002"
    echo "  ‚Ä¢ PostgreSQL:      Port 2003"
    echo ""
    echo "üåê URLs d'acc√®s :"
    echo "  ‚Ä¢ Frontend:        http://$(curl -s ifconfig.me):2000"
    echo "  ‚Ä¢ API:             http://$(curl -s ifconfig.me):2001"
    echo "  ‚Ä¢ Application:     http://$(curl -s ifconfig.me):2002"
    echo ""
    echo "üîß Commandes Docker utiles :"
    echo "  ‚Ä¢ Voir les logs:     docker-compose logs -f"
    echo "  ‚Ä¢ Red√©marrer:        docker-compose restart"
    echo "  ‚Ä¢ Arr√™ter:           docker-compose down"
    echo "  ‚Ä¢ Statut:            docker-compose ps"
    echo "  ‚Ä¢ Logs sp√©cifiques:  docker-compose logs [service]"
    echo ""
    echo "üîÑ Pour mettre √† jour :"
    echo "  cd $APP_DIR && git pull && docker-compose down && docker-compose up -d --build"
    echo ""
}

# Fonction principale
main() {
    print_status "D√©but du d√©ploiement Docker..."
    
    check_docker
    setup_repository
    stop_containers
    start_containers
    setup_firewall
    check_status
    show_deployment_info
    
    print_success "D√©ploiement Docker termin√© !"
}

# Ex√©cuter le script
main "$@"
