import { getDatabase } from './api/db.js';

/**
 * Script de correction du classement
 * R√©initialise et recalcule correctement tous les points des √©quipes
 */
async function fixRanking() {
  try {
    console.log('üîß Correction du classement en cours...');
    
    const db = await getDatabase();
    
    // 1. R√©initialiser toutes les statistiques
    console.log('üìä R√©initialisation des statistiques...');
    db.exec('UPDATE teams SET points = 0, buts = 0, gamelles = 0');
    
    // 2. R√©cup√©rer tous les matchs avec des scores
    const matchesWithScores = db.prepare(`
      SELECT * FROM matches 
      WHERE team1_goals > 0 OR team2_goals > 0 OR team1_gamelles > 0 OR team2_gamelles > 0
    `).all();
    
    console.log(`üìã ${matchesWithScores.length} matchs avec des scores trouv√©s`);
    
    // 3. Recalculer les statistiques pour chaque √©quipe
    const teams = db.prepare('SELECT id FROM teams').all();
    
    for (const team of teams) {
      console.log(`\nüîÑ Recalcul pour l'√©quipe ${team.id}...`);
      
      // R√©cup√©rer tous les matchs de cette √©quipe
      const teamMatches = db.prepare(`
        SELECT * FROM matches 
        WHERE equipe1_id = ? OR equipe2_id = ?
      `).all(team.id, team.id);
      
      let totalGoals = 0;
      let totalGamelles = 0;
      let totalPoints = 0;
      
      // Calculer les statistiques pour chaque match
      for (const match of teamMatches) {
        if (match.equipe1_id === team.id) {
          // L'√©quipe est l'√©quipe 1
          totalGoals += match.team1_goals || 0;
          totalGamelles += match.team1_gamelles || 0;
          
          const team1Final = Math.max(0, (match.team1_goals || 0) - (match.team2_gamelles || 0));
          const team2Final = Math.max(0, (match.team2_goals || 0) - (match.team1_gamelles || 0));
          
          if (team1Final > team2Final) {
            totalPoints += 3; // Victoire
          } else if (team1Final === team2Final && team1Final > 0) {
            totalPoints += 1; // Match nul (seulement si des scores existent)
          }
        } else {
          // L'√©quipe est l'√©quipe 2
          totalGoals += match.team2_goals || 0;
          totalGamelles += match.team2_gamelles || 0;
          
          const team1Final = Math.max(0, (match.team1_goals || 0) - (match.team2_gamelles || 0));
          const team2Final = Math.max(0, (match.team2_goals || 0) - (match.team1_gamelles || 0));
          
          if (team2Final > team1Final) {
            totalPoints += 3; // Victoire
          } else if (team1Final === team2Final && team1Final > 0) {
            totalPoints += 1; // Match nul (seulement si des scores existent)
          }
        }
      }
      
      // Mettre √† jour les statistiques de l'√©quipe
      const updateTeam = db.prepare(`
        UPDATE teams 
        SET points = ?, buts = ?, gamelles = ?
        WHERE id = ?
      `);
      
      updateTeam.run(totalPoints, totalGoals, totalGamelles, team.id);
      
      console.log(`   ‚úÖ ${team.id}: ${totalPoints} pts, ${totalGoals} buts, ${totalGamelles} gamelles`);
    }
    
    // 4. Afficher le classement final
    console.log('\nüèÜ Classement final corrig√©:');
    const finalTeams = db.prepare(`
      SELECT id, nom, points, buts, gamelles, (buts - gamelles) as difference
      FROM teams 
      ORDER BY points DESC, difference DESC, buts DESC
    `).all();
    
    finalTeams.forEach((team, index) => {
      console.log(`   ${index + 1}. ${team.nom} - Pts: ${team.points}, Buts: ${team.buts}, Gamelles: ${team.gamelles}, Diff: ${team.difference}`);
    });
    
    console.log('\n‚úÖ Correction du classement termin√©e avec succ√®s!');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error);
  }
}

// Ex√©cuter la correction
fixRanking();
